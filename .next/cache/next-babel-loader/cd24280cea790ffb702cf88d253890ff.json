{"ast":null,"code":"import { put, takeLatest } from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\nimport * as actionTypes from '../constants';\nexport function* watcherGigsSaga() {\n  console.log('watcherGigsSaga fired');\n  yield takeLatest(actionTypes.FETCH_GIGS_REQ, workerGigsSaga);\n}\nexport function* workerGigsSaga(actionObj) {\n  console.log('workerGigsSaga fired');\n  console.log('action obj is ', actionObj);\n  let rawUrl = '';\n  let retrievedGigs;\n  let error = null;\n  console.log('gist env var', process.env.REACT_APP_GIG_GIST); // go to gist\n\n  yield fetch(`https://api.github.com/gists/${process.env.REACT_APP_GIG_GIST}`).then(res => res.json()).then(json => {\n    console.log('json is back: ', json);\n    return rawUrl = json.files.gigs.raw_url;\n  }).catch(err => error = err); // get dirty raw url for all the gigs\n\n  yield fetch(rawUrl).then(res => res.json()).then(json => {\n    return retrievedGigs = json.gigs.sort((a, b) => {\n      var textA = a.name;\n      var textB = b.name;\n      return textA < textB ? -1 : textA > textB ? 1 : 0;\n    });\n  }).catch(err => console.log('err ', err));\n  retrievedGigs && retrievedGigs.length !== 0 ? yield put({\n    type: actions.FETCH_GIGS_RESP,\n    data: retrievedGigs\n  }) : yield put({\n    type: actions.FETCH_GIGS_RESP,\n    data: error\n  });\n}","map":{"version":3,"sources":["/home/adrianthompson/Documents/with-redux-app/redux/sagas/gigs.js"],"names":["put","takeLatest","fetch","actionTypes","watcherGigsSaga","console","log","FETCH_GIGS_REQ","workerGigsSaga","actionObj","rawUrl","retrievedGigs","error","process","env","REACT_APP_GIG_GIST","then","res","json","files","gigs","raw_url","catch","err","sort","a","b","textA","name","textB","length","type","actions","FETCH_GIGS_RESP","data"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,cAA7B;AAEA,OAAO,UAAUC,eAAV,GAA4B;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,QAAML,UAAU,CAACE,WAAW,CAACI,cAAb,EAA6BC,cAA7B,CAAhB;AACD;AAED,OAAO,UAAUA,cAAV,CAAyBC,SAAzB,EAAoC;AACzCJ,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BG,SAA9B;AAEA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,aAAJ;AACA,MAAIC,KAAK,GAAG,IAAZ;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BO,OAAO,CAACC,GAAR,CAAYC,kBAAxC,EAPyC,CASzC;;AACA,QAAMb,KAAK,CAAE,gCAA+BW,OAAO,CAACC,GAAR,CAAYC,kBAAmB,EAAhE,CAAL,CACHC,IADG,CACEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADT,EAEHF,IAFG,CAEEE,IAAI,IAAI;AACVb,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BY,IAA9B;AACF,WAAQR,MAAM,GAAGQ,IAAI,CAACC,KAAL,CAAWC,IAAX,CAAgBC,OAAjC;AACD,GALG,EAMHC,KANG,CAMGC,GAAG,IAAKX,KAAK,GAAGW,GANnB,CAAN,CAVyC,CAkBzC;;AACA,QAAMrB,KAAK,CAACQ,MAAD,CAAL,CACHM,IADG,CACEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADT,EAEHF,IAFG,CAEEE,IAAI,IAAI;AACZ,WAAQP,aAAa,GAAGO,IAAI,CAACE,IAAL,CAAUI,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC/C,UAAIC,KAAK,GAAGF,CAAC,CAACG,IAAd;AACA,UAAIC,KAAK,GAAGH,CAAC,CAACE,IAAd;AACA,aAAOD,KAAK,GAAGE,KAAR,GAAgB,CAAC,CAAjB,GAAqBF,KAAK,GAAGE,KAAR,GAAgB,CAAhB,GAAoB,CAAhD;AACD,KAJuB,CAAxB;AAKD,GARG,EASHP,KATG,CASGC,GAAG,IAAIlB,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBiB,GAApB,CATV,CAAN;AAWAZ,EAAAA,aAAa,IAAIA,aAAa,CAACmB,MAAd,KAAyB,CAA1C,GACI,MAAM9B,GAAG,CAAC;AAAE+B,IAAAA,IAAI,EAAEC,OAAO,CAACC,eAAhB;AAAiCC,IAAAA,IAAI,EAAEvB;AAAvC,GAAD,CADb,GAEI,MAAMX,GAAG,CAAC;AAAE+B,IAAAA,IAAI,EAAEC,OAAO,CAACC,eAAhB;AAAiCC,IAAAA,IAAI,EAAEtB;AAAvC,GAAD,CAFb;AAID","sourcesContent":["import { put, takeLatest } from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\nimport * as actionTypes from '../constants';\n\nexport function* watcherGigsSaga() {\n  console.log('watcherGigsSaga fired');\n  yield takeLatest(actionTypes.FETCH_GIGS_REQ, workerGigsSaga);\n}\n\nexport function* workerGigsSaga(actionObj) {\n  console.log('workerGigsSaga fired');\n  console.log('action obj is ', actionObj);\n\n  let rawUrl = '';\n  let retrievedGigs;\n  let error = null;\n  console.log('gist env var', process.env.REACT_APP_GIG_GIST);\n  \n  // go to gist\n  yield fetch(`https://api.github.com/gists/${process.env.REACT_APP_GIG_GIST}`)\n    .then(res => res.json())\n    .then(json => {\n        console.log('json is back: ', json);\n      return (rawUrl = json.files.gigs.raw_url);\n    })\n    .catch(err => (error = err));\n\n  // get dirty raw url for all the gigs\n  yield fetch(rawUrl)\n    .then(res => res.json())\n    .then(json => {\n      return (retrievedGigs = json.gigs.sort((a, b) => {\n        var textA = a.name;\n        var textB = b.name;\n        return textA < textB ? -1 : textA > textB ? 1 : 0;\n      }));\n    })\n    .catch(err => console.log('err ', err));\n\n  retrievedGigs && retrievedGigs.length !== 0\n    ? yield put({ type: actions.FETCH_GIGS_RESP, data: retrievedGigs })\n    : yield put({ type: actions.FETCH_GIGS_RESP, data: error });\n\n}\n"]},"metadata":{},"sourceType":"module"}