{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst initializeStore = initialState => {\n  // Make exception for redux dev tools\n\n  /* eslint-disable no-underscore-dangle */\n\n  /* eslint-disable no-undef */\n  const composeEnhancers = false && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  /* eslint-enable */\n\n  const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\n  store.runSaga = () => {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = async () => {\n    // Avoid running twice\n    if (!store.saga) return;\n    store.dispatch(END);\n    await store.saga.done;\n    store.saga = null;\n  };\n\n  store.execSagaTasks = async (isServer, tasks) => {\n    // run saga\n    store.runSaga(); // dispatch saga tasks\n\n    tasks(store.dispatch); // Stop running and wait for the tasks to be done\n\n    await store.stopSaga(); // Re-run on client side\n\n    if (!isServer) {\n      store.runSaga();\n    }\n  }; // Initial run\n\n\n  store.runSaga();\n  return store;\n};\n\nexport default initializeStore;","map":{"version":3,"sources":["/home/adrianthompson/Documents/with-redux-app/redux/store.js"],"names":["createStore","applyMiddleware","combineReducers","compose","createSagaMiddleware","END","reducers","rootSaga","sagaMiddleware","initializeStore","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","runSaga","saga","run","stopSaga","dispatch","done","execSagaTasks","isServer","tasks"],"mappings":"AAAA,SACEA,WADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,OAJF,QAKO,OALP;AAMA,OAAOC,oBAAP,IAA+BC,GAA/B,QAA0C,YAA1C;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,SAArB;AAEA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;;AAEA,MAAMK,eAAe,GAAIC,YAAD,IAAkB;AACxC;;AACA;;AACA;AACA,QAAMC,gBAAgB,GAAI,SAAiCC,MAAM,CAACC,oCAAzC,IAAkFV,OAA3G;AACA;;AACA,QAAMW,KAAK,GAAGd,WAAW,CACvBM,QADuB,EAEvBI,YAFuB,EAGvBC,gBAAgB,CAACV,eAAe,CAACO,cAAD,CAAhB,CAHO,CAAzB;;AAMAM,EAAAA,KAAK,CAACC,OAAN,GAAgB,MAAM;AACpB;AACA,QAAID,KAAK,CAACE,IAAV,EAAgB;AAChBF,IAAAA,KAAK,CAACE,IAAN,GAAaR,cAAc,CAACS,GAAf,CAAmBV,QAAnB,CAAb;AACD,GAJD;;AAMAO,EAAAA,KAAK,CAACI,QAAN,GAAiB,YAAY;AAC3B;AACA,QAAI,CAACJ,KAAK,CAACE,IAAX,EAAiB;AACjBF,IAAAA,KAAK,CAACK,QAAN,CAAed,GAAf;AACA,UAAMS,KAAK,CAACE,IAAN,CAAWI,IAAjB;AACAN,IAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;AACD,GAND;;AAQAF,EAAAA,KAAK,CAACO,aAAN,GAAsB,OAAOC,QAAP,EAAiBC,KAAjB,KAA2B;AAC/C;AACAT,IAAAA,KAAK,CAACC,OAAN,GAF+C,CAG/C;;AACAQ,IAAAA,KAAK,CAACT,KAAK,CAACK,QAAP,CAAL,CAJ+C,CAK/C;;AACA,UAAML,KAAK,CAACI,QAAN,EAAN,CAN+C,CAO/C;;AACA,QAAI,CAACI,QAAL,EAAe;AACbR,MAAAA,KAAK,CAACC,OAAN;AACD;AACF,GAXD,CA1BwC,CAuCxC;;;AACAD,EAAAA,KAAK,CAACC,OAAN;AAEA,SAAOD,KAAP;AACD,CA3CD;;AA6CA,eAAeL,eAAf","sourcesContent":["import {\n  createStore,\n  applyMiddleware,\n  combineReducers,\n  compose,\n} from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\n\nimport reducers from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst initializeStore = (initialState) => {\n  // Make exception for redux dev tools\n  /* eslint-disable no-underscore-dangle */\n  /* eslint-disable no-undef */\n  const composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n  /* eslint-enable */\n  const store = createStore(\n    reducers,\n    initialState,\n    composeEnhancers(applyMiddleware(sagaMiddleware)),\n  );\n\n  store.runSaga = () => {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = async () => {\n    // Avoid running twice\n    if (!store.saga) return;\n    store.dispatch(END);\n    await store.saga.done;\n    store.saga = null;\n  };\n\n  store.execSagaTasks = async (isServer, tasks) => {\n    // run saga\n    store.runSaga();\n    // dispatch saga tasks\n    tasks(store.dispatch);\n    // Stop running and wait for the tasks to be done\n    await store.stopSaga();\n    // Re-run on client side\n    if (!isServer) {\n      store.runSaga();\n    }\n  };\n\n  // Initial run\n  store.runSaga();\n\n  return store;\n};\n\nexport default initializeStore;\n"]},"metadata":{},"sourceType":"module"}