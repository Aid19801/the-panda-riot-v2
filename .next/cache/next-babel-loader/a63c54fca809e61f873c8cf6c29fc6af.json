{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/adrianthompson/Documents/with-redux-app/pages/home.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { NextSeo } from 'next-seo';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport { signInPageLoading, signInPageLoaded, signInPageFailed } from '../redux/actions';\nimport * as cache from '../lib/cache';\nimport '../lib/index.css';\nimport withAuthentication from '../HOCs/with-auth';\n\nclass HomePage extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"signOut\", () => {\n      this.props.signOut();\n    });\n\n    _defineProperty(this, \"componentWillReceiveProps\", nextProps => {\n      console.log('nextProps: ', nextProps);\n    });\n\n    this.state = {};\n  } //   static async getInitialProps({ req }) {\n  //     // const isServer = !!req\n  //     const res = await fetch('https://jsonplaceholder.typicode.com/users');\n  //     const json = await res.json();\n  //     return {\n  //       users: json\n  //     };\n  //   }\n\n\n  componentDidMount() {\n    const {\n      pageLoading\n    } = this.props;\n    const {\n      reduxUID\n    } = this.props;\n    const cacheUID = cache.getFromCache('uid'); // pageLoading();\n\n    console.log('props ', this.props); // NEXT = vv put redux uid and/or cache uid from firebase as condition that bounces it back to signin.\n\n    if (!reduxUID && !cacheUID) {\n      Router.push('/signin');\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"page-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(NextSeo, {\n      openGraph: {\n        type: 'website',\n        url: 'https://www.thePandaRiot.com/gigs',\n        title: 'Sign In',\n        description: 'Sign in to the panda riot open mic comedy webapp!',\n        images: [{\n          url: 'https://i.ytimg.com/vi/kQBHzHBMlM4/hqdefault.jpg',\n          width: 800,\n          height: 600,\n          alt: 'Og Image Alt'\n        }, {\n          url: 'https://pbs.twimg.com/profile_images/498909008292347904/8EkJ3yZ-_400x400.png',\n          width: 800,\n          height: 600,\n          alt: 'Og Image Alt 2'\n        }]\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), __jsx(\"h1\", {\n      className: \"funky-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Home\"), __jsx(\"button\", {\n      onClick: this.signOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Sign Out\"), __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"you can only see me if youre logged in\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  loading: state.signIn.loading,\n  error: state.signIn.error,\n  reduxUID: state.signIn.uid\n});\n\nconst mapDispatchToProps = dispatch => ({\n  pageLoading: () => dispatch(signInPageLoading()),\n  pageLoaded: () => dispatch(signInPageLoaded()),\n  pageFailed: () => dispatch(signInPageFailed())\n});\n\nconst condition = authUser => !!authUser;\n\nexport default compose(withAuthentication, connect(mapStateToProps, null))(HomePage);","map":{"version":3,"sources":["/home/adrianthompson/Documents/with-redux-app/pages/home.js"],"names":["React","NextSeo","compose","connect","Router","signInPageLoading","signInPageLoaded","signInPageFailed","cache","withAuthentication","HomePage","Component","constructor","props","signOut","nextProps","console","log","state","componentDidMount","pageLoading","reduxUID","cacheUID","getFromCache","push","render","type","url","title","description","images","width","height","alt","mapStateToProps","loading","signIn","error","uid","mapDispatchToProps","dispatch","pageLoaded","pageFailed","condition","authUser"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NextSeo } from 'next-seo';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport {\n  signInPageLoading,\n  signInPageLoaded,\n  signInPageFailed\n} from '../redux/actions';\nimport * as cache from '../lib/cache';\nimport '../lib/index.css';\nimport withAuthentication from '../HOCs/with-auth';\n\nclass HomePage extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n    }\n  }\n  //   static async getInitialProps({ req }) {\n  //     // const isServer = !!req\n  //     const res = await fetch('https://jsonplaceholder.typicode.com/users');\n  //     const json = await res.json();\n\n  //     return {\n  //       users: json\n  //     };\n  //   }\n\n  componentDidMount() {\n    const { pageLoading } = this.props;\n    const { reduxUID } = this.props;\n    const cacheUID = cache.getFromCache('uid');\n    // pageLoading();\n    console.log('props ', this.props);\n\n    // NEXT = vv put redux uid and/or cache uid from firebase as condition that bounces it back to signin.\n    if (!reduxUID && !cacheUID) {\n      Router.push('/signin')\n    }\n  }\n\n  signOut = () => {\n    this.props.signOut();\n  }\n\n  componentWillReceiveProps = nextProps => {\n    console.log('nextProps: ', nextProps);\n  }\n\n\n  render() {\n\n    return (\n      <div id=\"page-container\">\n        <NextSeo\n          openGraph={{\n            type: 'website',\n            url: 'https://www.thePandaRiot.com/gigs',\n            title: 'Sign In',\n            description: 'Sign in to the panda riot open mic comedy webapp!',\n            images: [\n              {\n                url: 'https://i.ytimg.com/vi/kQBHzHBMlM4/hqdefault.jpg',\n                width: 800,\n                height: 600,\n                alt: 'Og Image Alt'\n              },\n              {\n                url:\n                  'https://pbs.twimg.com/profile_images/498909008292347904/8EkJ3yZ-_400x400.png',\n                width: 800,\n                height: 600,\n                alt: 'Og Image Alt 2'\n              }\n            ]\n          }}\n        />\n        <h1 className=\"funky-title\">Home</h1>\n        <button onClick={this.signOut}>Sign Out</button>\n        <p>you can only see me if youre logged in</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loading: state.signIn.loading,\n  error: state.signIn.error,\n  reduxUID: state.signIn.uid,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  pageLoading: () => dispatch(signInPageLoading()),\n  pageLoaded: () => dispatch(signInPageLoaded()),\n  pageFailed: () => dispatch(signInPageFailed())\n});\n\nconst condition = authUser => !!authUser;\n\nexport default compose(\n  withAuthentication,\n  connect(mapStateToProps, null),\n)(HomePage)\n"]},"metadata":{},"sourceType":"module"}