{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/adrianthompson/Documents/with-redux-app/HOCs/with-auth.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withFirebase } from '.';\nimport * as cache from '../lib/cache';\nimport Router from 'next/router';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport { saveAuthenticatedUID } from '../redux/actions';\n\nvar withAuthentication = function withAuthentication(PlatformSpecificComponent) {\n  var withAuthenticationClass =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(withAuthenticationClass, _React$Component);\n\n    function withAuthenticationClass(props) {\n      var _this;\n\n      _classCallCheck(this, withAuthenticationClass);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(withAuthenticationClass).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_this), \"ifNotAuthRouteToSignIn\", function () {\n        cache.clearFromCache('userProfile');\n        cache.clearFromCache('uid');\n\n        _this.setState({\n          authUser: null\n        });\n\n        Router.push('/signin');\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"ifAuthSaveToCache\",\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(authUser) {\n          var userProfile, userProfileStatus;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  // USER AUTH save authUser to local state, redux and cache.\n                  _this.setState({\n                    authUser: authUser\n                  });\n\n                  _this.props.updateStateWithUID(authUser.uid);\n\n                  cache.saveToCache('uid', authUser.uid); // DATABASE / USER PROFILE\n                  // get userProfile from cache (this is just a string bool)\n\n                  _context.next = 5;\n                  return cache.getFromCache('userProfile');\n\n                case 5:\n                  userProfile = _context.sent;\n                  // console.log('userProfileStatus string ', userProfileStatus)\n                  // switch to a real bool\n                  userProfileStatus = userProfile === 'true' ? true : false; // console.log('userProfileStatus bool ', userProfileStatus)\n                  // if its false, check the FB database, if it includes faveGig\n                  // set to true.\n                  // so first time it renders after signup, it will check if you\n                  // entered a faveGig minimum for your profile, and if not,\n                  // `userProfile` cache stays false.\n\n                  if (userProfileStatus) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  // console.log('user prof status is false =>' , userProfileStatus, typeof userProfileStatus)\n                  _this.props.firebase.user(authUser.uid).on('value', function (snapshot) {\n                    // console.log('on value fired')\n                    var fbuserProfile = snapshot.val(); // console.log('fbUserProfile snapshot val ', fbuserProfile)\n                    // get FB profile, check if faveGig exists\n\n                    if (fbuserProfile && fbuserProfile.faveGig === '') {\n                      // if profile exists but faveGig empty, set cache to false (user hasnt completed db profile)\n                      // console.log('fave gig doesnt exist, userProfile cache should be false');\n                      cache.saveToCache('userProfile', 'false');\n                    } // if it exists and it's not empty, set cache to true (user has completed db profile)\n\n\n                    if (fbuserProfile && fbuserProfile.faveGig !== '') {\n                      // console.log('fave gig DOES exist, userProfile cache should be true');\n                      cache.saveToCache('userProfile', 'true');\n                    }\n                  });\n\n                  return _context.abrupt(\"return\");\n\n                case 10:\n                  return _context.abrupt(\"return\", Router.push('/home'));\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n\n      _defineProperty(_assertThisInitialized(_this), \"signOut\", function () {\n        cache.clearFromCache('uid', '');\n        cache.clearFromCache('userProfile', false);\n\n        _this.props.firebase.doSignOut();\n\n        Router.push('/signin');\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"signIn\", function (email, password) {// this is done at page level. wrapping '/signin' with `withAuthentication`\n        // would make it only visible to users who are signed in === Endless loop.\n      });\n\n      _this.state = {\n        authUser: null\n      };\n      return _this;\n    }\n\n    _createClass(withAuthenticationClass, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        // const uid = cache.getFromCache('uid');\n        // if (!uid) {\n        //   return Router.push('/signin');\n        // }\n        this.listener = this.props.firebase.auth.onAuthStateChanged(function (authUser) {\n          authUser ? _this2.ifAuthSaveToCache(authUser) : _this2.ifNotAuthRouteToSignIn();\n        });\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.listener();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var authUser = this.state.authUser;\n        return __jsx(PlatformSpecificComponent, _extends({}, this.props, {\n          authUser: authUser,\n          signOut: this.signOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return withAuthenticationClass;\n  }(React.Component);\n\n  var mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return {\n      updateStateWithUID: function updateStateWithUID(id) {\n        return dispatch(saveAuthenticatedUID(id));\n      }\n    };\n  };\n\n  hoistNonReactStatic(withAuthenticationClass, PlatformSpecificComponent);\n\n  if (withAuthenticationClass.getInitialProps) {\n    withAuthenticationClass.getInitialProps();\n  }\n\n  return compose(withFirebase, connect(null, mapDispatchToProps))(withAuthenticationClass);\n};\n\nexport default withAuthentication;","map":{"version":3,"sources":["/home/adrianthompson/Documents/with-redux-app/HOCs/with-auth.js"],"names":["React","compose","connect","withFirebase","cache","Router","hoistNonReactStatic","saveAuthenticatedUID","withAuthentication","PlatformSpecificComponent","withAuthenticationClass","props","clearFromCache","setState","authUser","push","updateStateWithUID","uid","saveToCache","getFromCache","userProfile","userProfileStatus","firebase","user","on","snapshot","fbuserProfile","val","faveGig","doSignOut","email","password","state","listener","auth","onAuthStateChanged","ifAuthSaveToCache","ifNotAuthRouteToSignIn","signOut","Component","mapDispatchToProps","dispatch","id","getInitialProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withFirebase } from '.';\nimport * as cache from '../lib/cache';\nimport Router from 'next/router';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nimport { saveAuthenticatedUID } from '../redux/actions';\n\nconst withAuthentication = PlatformSpecificComponent => {\n  class withAuthenticationClass extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      // const uid = cache.getFromCache('uid');\n      // if (!uid) {\n      //   return Router.push('/signin');\n      // }\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        authUser\n          ? this.ifAuthSaveToCache(authUser)\n          : this.ifNotAuthRouteToSignIn();\n      });\n    }\n\n    ifNotAuthRouteToSignIn = () => {\n      cache.clearFromCache('userProfile');\n      cache.clearFromCache('uid');\n      this.setState({\n        authUser: null\n      });\n      Router.push('/signin');\n    };\n\n    // if the user is authorised (signedin) then grab deets\n    // for local state, redux and cacheing.\n    ifAuthSaveToCache = async authUser => {\n      // USER AUTH save authUser to local state, redux and cache.\n      this.setState({ authUser });\n      this.props.updateStateWithUID(authUser.uid);\n      cache.saveToCache('uid', authUser.uid);\n\n      // DATABASE / USER PROFILE\n      // get userProfile from cache (this is just a string bool)\n      let userProfile = await cache.getFromCache('userProfile');\n      // console.log('userProfileStatus string ', userProfileStatus)\n      // switch to a real bool\n      let userProfileStatus = userProfile === 'true' ? true : false;\n      // console.log('userProfileStatus bool ', userProfileStatus)\n      // if its false, check the FB database, if it includes faveGig\n      // set to true.\n      // so first time it renders after signup, it will check if you\n      // entered a faveGig minimum for your profile, and if not,\n      // `userProfile` cache stays false.\n      if (!userProfileStatus) {\n        // console.log('user prof status is false =>' , userProfileStatus, typeof userProfileStatus)\n        this.props.firebase.user(authUser.uid).on('value', snapshot => {\n          // console.log('on value fired')\n          let fbuserProfile = snapshot.val();\n          // console.log('fbUserProfile snapshot val ', fbuserProfile)\n          // get FB profile, check if faveGig exists\n          if (fbuserProfile && fbuserProfile.faveGig === '') {\n            // if profile exists but faveGig empty, set cache to false (user hasnt completed db profile)\n            // console.log('fave gig doesnt exist, userProfile cache should be false');\n            cache.saveToCache('userProfile', 'false');\n          }\n          // if it exists and it's not empty, set cache to true (user has completed db profile)\n          if (fbuserProfile && fbuserProfile.faveGig !== '') {\n            // console.log('fave gig DOES exist, userProfile cache should be true');\n            cache.saveToCache('userProfile', 'true');\n          }\n        });\n        return;\n      }\n\n      return Router.push('/home');\n      //   return cache.saveToCache('uid', authUser.uid);\n    };\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    signOut = () => {\n      cache.clearFromCache('uid', '');\n      cache.clearFromCache('userProfile', false);\n      this.props.firebase.doSignOut();\n      Router.push('/signin');\n    };\n\n    signIn = (email, password) => {\n      // this is done at page level. wrapping '/signin' with `withAuthentication`\n      // would make it only visible to users who are signed in === Endless loop.\n    };\n\n    render() {\n      const { authUser } = this.state;\n      return (\n        <PlatformSpecificComponent\n          {...this.props}\n          authUser={authUser}\n          signOut={this.signOut}\n        />\n      );\n    }\n  }\n\n  const mapDispatchToProps = dispatch => ({\n    updateStateWithUID: id => dispatch(saveAuthenticatedUID(id))\n  });\n\n  \n  hoistNonReactStatic(withAuthenticationClass, PlatformSpecificComponent);\n  \n  if (withAuthenticationClass.getInitialProps) {\n    withAuthenticationClass.getInitialProps()\n  }\n\n  return compose(\n    withFirebase,\n    connect(\n      null,\n      mapDispatchToProps\n    )\n  )(withAuthenticationClass);\n};\n\nexport default withAuthentication;\n"]},"metadata":{},"sourceType":"module"}