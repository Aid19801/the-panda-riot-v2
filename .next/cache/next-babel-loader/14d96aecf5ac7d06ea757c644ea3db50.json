{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watcherGigsSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(workerGigsSaga);\n\nimport { put, takeLatest } from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\nimport * as actionTypes from '../constants';\nexport function watcherGigsSaga() {\n  return _regeneratorRuntime.wrap(function watcherGigsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('watcherGigsSaga fired');\n          _context.next = 3;\n          return takeLatest(actionTypes.FETCH_GIGS_REQ, workerGigsSaga);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function workerGigsSaga(actionObj) {\n  var rawUrl, retrievedGigs, error;\n  return _regeneratorRuntime.wrap(function workerGigsSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('workerGigsSaga fired');\n          console.log('action obj is ', actionObj);\n          rawUrl = '';\n          error = null;\n          console.log('gist env var', process.env.REACT_APP_GIG_GIST); // go to gist\n\n          _context2.next = 7;\n          return fetch(\"https://api.github.com/gists/\".concat(process.env.REACT_APP_GIG_GIST)).then(function (res) {\n            return res.json();\n          }).then(function (json) {\n            console.log('json is back: ', json);\n            return rawUrl = json.files.gigs.raw_url;\n          })[\"catch\"](function (err) {\n            return error = err;\n          });\n\n        case 7:\n          _context2.next = 9;\n          return fetch(rawUrl).then(function (res) {\n            return res.json();\n          }).then(function (json) {\n            return retrievedGigs = json.gigs.sort(function (a, b) {\n              var textA = a.name;\n              var textB = b.name;\n              return textA < textB ? -1 : textA > textB ? 1 : 0;\n            });\n          })[\"catch\"](function (err) {\n            return console.log('err ', err);\n          });\n\n        case 9:\n          if (!(retrievedGigs && retrievedGigs.length !== 0)) {\n            _context2.next = 14;\n            break;\n          }\n\n          _context2.next = 12;\n          return put({\n            type: actions.FETCH_GIGS_RESP,\n            data: retrievedGigs\n          });\n\n        case 12:\n          _context2.next = 16;\n          break;\n\n        case 14:\n          _context2.next = 16;\n          return put({\n            type: actions.FETCH_GIGS_RESP,\n            data: error\n          });\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/home/adrianthompson/Documents/with-redux-app/redux/sagas/gigs.js"],"names":["watcherGigsSaga","workerGigsSaga","put","takeLatest","fetch","actionTypes","console","log","FETCH_GIGS_REQ","actionObj","rawUrl","error","process","env","REACT_APP_GIG_GIST","then","res","json","files","gigs","raw_url","err","retrievedGigs","sort","a","b","textA","name","textB","length","type","actions","FETCH_GIGS_RESP","data"],"mappings":";;;;yBAIiBA,e;;;yBAKAC,c;;AATjB,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,cAA7B;AAEA,OAAO,SAAUL,eAAV;AAAA;AAAA;AAAA;AAAA;AACLM,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AADK;AAEL,iBAAMJ,UAAU,CAACE,WAAW,CAACG,cAAb,EAA6BP,cAA7B,CAAhB;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAUA,cAAV,CAAyBQ,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACLH,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BE,SAA9B;AAEIC,UAAAA,MAJC,GAIQ,EAJR;AAMDC,UAAAA,KANC,GAMO,IANP;AAOLL,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BK,OAAO,CAACC,GAAR,CAAYC,kBAAxC,EAPK,CASL;;AATK;AAUL,iBAAMV,KAAK,wCAAiCQ,OAAO,CAACC,GAAR,CAAYC,kBAA7C,EAAL,CACHC,IADG,CACE,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,WADL,EAEHF,IAFG,CAEE,UAAAE,IAAI,EAAI;AACVX,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BU,IAA9B;AACF,mBAAQP,MAAM,GAAGO,IAAI,CAACC,KAAL,CAAWC,IAAX,CAAgBC,OAAjC;AACD,WALG,WAMG,UAAAC,GAAG;AAAA,mBAAKV,KAAK,GAAGU,GAAb;AAAA,WANN,CAAN;;AAVK;AAAA;AAmBL,iBAAMjB,KAAK,CAACM,MAAD,CAAL,CACHK,IADG,CACE,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,WADL,EAEHF,IAFG,CAEE,UAAAE,IAAI,EAAI;AACZ,mBAAQK,aAAa,GAAGL,IAAI,CAACE,IAAL,CAAUI,IAAV,CAAe,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC/C,kBAAIC,KAAK,GAAGF,CAAC,CAACG,IAAd;AACA,kBAAIC,KAAK,GAAGH,CAAC,CAACE,IAAd;AACA,qBAAOD,KAAK,GAAGE,KAAR,GAAgB,CAAC,CAAjB,GAAqBF,KAAK,GAAGE,KAAR,GAAgB,CAAhB,GAAoB,CAAhD;AACD,aAJuB,CAAxB;AAKD,WARG,WASG,UAAAP,GAAG;AAAA,mBAAIf,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBc,GAApB,CAAJ;AAAA,WATN,CAAN;;AAnBK;AAAA,gBA8BLC,aAAa,IAAIA,aAAa,CAACO,MAAd,KAAyB,CA9BrC;AAAA;AAAA;AAAA;;AAAA;AA+BD,iBAAM3B,GAAG,CAAC;AAAE4B,YAAAA,IAAI,EAAEC,OAAO,CAACC,eAAhB;AAAiCC,YAAAA,IAAI,EAAEX;AAAvC,WAAD,CAAT;;AA/BC;AAAA;AAAA;;AAAA;AAAA;AAgCD,iBAAMpB,GAAG,CAAC;AAAE4B,YAAAA,IAAI,EAAEC,OAAO,CAACC,eAAhB;AAAiCC,YAAAA,IAAI,EAAEtB;AAAvC,WAAD,CAAT;;AAhCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, takeLatest } from 'redux-saga/effects';\nimport fetch from 'isomorphic-unfetch';\nimport * as actionTypes from '../constants';\n\nexport function* watcherGigsSaga() {\n  console.log('watcherGigsSaga fired');\n  yield takeLatest(actionTypes.FETCH_GIGS_REQ, workerGigsSaga);\n}\n\nexport function* workerGigsSaga(actionObj) {\n  console.log('workerGigsSaga fired');\n  console.log('action obj is ', actionObj);\n\n  let rawUrl = '';\n  let retrievedGigs;\n  let error = null;\n  console.log('gist env var', process.env.REACT_APP_GIG_GIST);\n  \n  // go to gist\n  yield fetch(`https://api.github.com/gists/${process.env.REACT_APP_GIG_GIST}`)\n    .then(res => res.json())\n    .then(json => {\n        console.log('json is back: ', json);\n      return (rawUrl = json.files.gigs.raw_url);\n    })\n    .catch(err => (error = err));\n\n  // get dirty raw url for all the gigs\n  yield fetch(rawUrl)\n    .then(res => res.json())\n    .then(json => {\n      return (retrievedGigs = json.gigs.sort((a, b) => {\n        var textA = a.name;\n        var textB = b.name;\n        return textA < textB ? -1 : textA > textB ? 1 : 0;\n      }));\n    })\n    .catch(err => console.log('err ', err));\n\n  retrievedGigs && retrievedGigs.length !== 0\n    ? yield put({ type: actions.FETCH_GIGS_RESP, data: retrievedGigs })\n    : yield put({ type: actions.FETCH_GIGS_RESP, data: error });\n\n}\n"]},"metadata":{},"sourceType":"module"}