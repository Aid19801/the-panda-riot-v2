{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/adrianthompson/Documents/with-redux-app/HOCs/with-auth.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withFirebase } from '.';\nimport * as cache from '../lib/cache';\nimport Router from 'next/router';\nimport { saveUid } from '../redux/actions';\n\nvar withAuthentication = function withAuthentication(Component) {\n  var withAuthentication =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(withAuthentication, _React$Component);\n\n    function withAuthentication(props) {\n      var _this;\n\n      _classCallCheck(this, withAuthentication);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(withAuthentication).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_this), \"ifNotAuthRouteToSignIn\", function () {\n        _this.setState({\n          authUser: null\n        });\n\n        Router.push('/signin');\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"ifAuthSaveToCache\", function (authUser) {\n        _this.setState({\n          authUser: authUser\n        });\n\n        _this.props.updateStateUID(authUser.uid);\n\n        return cache.saveToCache('uid', authUser.uid);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"signOut\", function () {\n        cache.clearFromCache('uid', '');\n        Router.push('/signin');\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"signIn\", function (email, password) {// this is done at page level. wrapping '/signin' with `withAuthentication`\n        // would make it only visible to users who are signed in === Endless loop.\n      });\n\n      _this.state = {\n        authUser: null\n      };\n      return _this;\n    }\n\n    _createClass(withAuthentication, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        this.listener = this.props.firebase.auth.onAuthStateChanged(function (authUser) {\n          authUser ? _this2.ifAuthSaveToCache(authUser) : _this2.ifNotAuthRouteToSignIn();\n        }); // this.ifNotAuthRouteToSignIn();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.listener();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var authUser = this.state.authUser;\n        return __jsx(Component, _extends({}, this.props, {\n          authUser: authUser,\n          signOut: this.signOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return withAuthentication;\n  }(React.Component);\n\n  var mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return {\n      updateStateUID: function updateStateUID(uid) {\n        return dispatch(saveUid(uid));\n      }\n    };\n  };\n\n  return compose(withFirebase, connect(null, mapDispatchToProps))(withAuthentication);\n};\n\nexport default withAuthentication;","map":{"version":3,"sources":["/home/adrianthompson/Documents/with-redux-app/HOCs/with-auth.js"],"names":["React","compose","connect","withFirebase","cache","Router","saveUid","withAuthentication","Component","props","setState","authUser","push","updateStateUID","uid","saveToCache","clearFromCache","email","password","state","listener","firebase","auth","onAuthStateChanged","ifAuthSaveToCache","ifNotAuthRouteToSignIn","signOut","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,GAA7B;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAEA,IAAMC,kBAAkB,GAAG,4BAAAC,SAAS,EAAI;AAAA,MAChCD,kBADgC;AAAA;AAAA;AAAA;;AAEpC,gCAAYE,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8FAAMA,KAAN;;AADiB,+EAgBM,YAAM;AAC7B,cAAKC,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAE;AADE,SAAd;;AAGAN,QAAAA,MAAM,CAACO,IAAP,CAAY,SAAZ;AACD,OArBkB;;AAAA,0EAuBC,UAAAD,QAAQ,EAAI;AAC9B,cAAKD,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAARA;AAAF,SAAd;;AACA,cAAKF,KAAL,CAAWI,cAAX,CAA0BF,QAAQ,CAACG,GAAnC;;AACA,eAAOV,KAAK,CAACW,WAAN,CAAkB,KAAlB,EAAyBJ,QAAQ,CAACG,GAAlC,CAAP;AACD,OA3BkB;;AAAA,gEAiCT,YAAM;AACdV,QAAAA,KAAK,CAACY,cAAN,CAAqB,KAArB,EAA4B,EAA5B;AACAX,QAAAA,MAAM,CAACO,IAAP,CAAY,SAAZ;AACD,OApCkB;;AAAA,+DAsCV,UAACK,KAAD,EAAQC,QAAR,EAAqB,CAC5B;AACA;AACD,OAzCkB;;AAEjB,YAAKC,KAAL,GAAa;AACXR,QAAAA,QAAQ,EAAE;AADC,OAAb;AAFiB;AAKlB;;AAPmC;AAAA;AAAA,0CAShB;AAAA;;AAClB,aAAKS,QAAL,GAAgB,KAAKX,KAAL,CAAWY,QAAX,CAAoBC,IAApB,CAAyBC,kBAAzB,CAA4C,UAAAZ,QAAQ,EAAI;AACtEA,UAAAA,QAAQ,GACJ,MAAI,CAACa,iBAAL,CAAuBb,QAAvB,CADI,GAEJ,MAAI,CAACc,sBAAL,EAFJ;AAGD,SAJe,CAAhB,CADkB,CAMlB;AACD;AAhBmC;AAAA;AAAA,6CA+Bb;AACrB,aAAKL,QAAL;AACD;AAjCmC;AAAA;AAAA,+BA6C3B;AAAA,YACCT,QADD,GACc,KAAKQ,KADnB,CACCR,QADD;AAEP,eACE,MAAC,SAAD,eAAe,KAAKF,KAApB;AAA2B,UAAA,QAAQ,EAAEE,QAArC;AAA+C,UAAA,OAAO,EAAE,KAAKe,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAGD;AAlDmC;;AAAA;AAAA,IACL1B,KAAK,CAACQ,SADD;;AAqDtC,MAAMmB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,WAAK;AACpCf,MAAAA,cAAc,EAAE,wBAACC,GAAD;AAAA,eAASc,QAAQ,CAACtB,OAAO,CAACQ,GAAD,CAAR,CAAjB;AAAA;AADoB,KAAL;AAAA,GAAnC;;AAIA,SAAOb,OAAO,CACVE,YADU,EAEVD,OAAO,CAAC,IAAD,EAAOyB,kBAAP,CAFG,CAAP,CAGLpB,kBAHK,CAAP;AAID,CA7DD;;AA+DA,eAAeA,kBAAf","sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withFirebase } from '.';\nimport * as cache from '../lib/cache';\nimport Router from 'next/router';\nimport { saveUid } from '../redux/actions';\n\nconst withAuthentication = Component => {\n  class withAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        authUser\n          ? this.ifAuthSaveToCache(authUser)\n          : this.ifNotAuthRouteToSignIn();\n      });\n      // this.ifNotAuthRouteToSignIn();\n    }\n\n    ifNotAuthRouteToSignIn = () => {\n      this.setState({\n        authUser: null\n      });\n      Router.push('/signin');\n    };\n\n    ifAuthSaveToCache = authUser => {\n      this.setState({ authUser });\n      this.props.updateStateUID(authUser.uid);\n      return cache.saveToCache('uid', authUser.uid);\n    };\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    signOut = () => {\n      cache.clearFromCache('uid', '');\n      Router.push('/signin');\n    };\n\n    signIn = (email, password) => {\n      // this is done at page level. wrapping '/signin' with `withAuthentication`\n      // would make it only visible to users who are signed in === Endless loop.\n    };\n\n    render() {\n      const { authUser } = this.state;\n      return (\n        <Component {...this.props} authUser={authUser} signOut={this.signOut} />\n      );\n    }\n  }\n\n  const mapDispatchToProps = dispatch => ({\n      updateStateUID: (uid) => dispatch(saveUid(uid)),\n  })\n  \n  return compose(\n      withFirebase,\n      connect(null, mapDispatchToProps),\n  )(withAuthentication)\n};\n\nexport default withAuthentication;\n"]},"metadata":{},"sourceType":"module"}