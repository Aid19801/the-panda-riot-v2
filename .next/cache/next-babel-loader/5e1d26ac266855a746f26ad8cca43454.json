{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/adrianthompson/Documents/with-redux-app/HOCs/with-auth.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withFirebase } from '.';\nimport * as cache from '../lib/cache';\nimport Router from 'next/router';\nimport { saveUid } from '../redux/actions';\n\nconst withAuthentication = Component => {\n  class withAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"ifNotAuthRouteToSignIn\", () => {\n        this.setState({\n          authUser: null\n        });\n        Router.push('/signin');\n      });\n\n      _defineProperty(this, \"ifAuthSaveToCache\", authUser => {\n        this.setState({\n          authUser\n        });\n        this.props.updateStateUID(authUser.uid);\n        return cache.saveToCache('uid', authUser.uid);\n      });\n\n      _defineProperty(this, \"signOut\", () => {\n        cache.clearFromCache('uid', '');\n        Router.push('/signin');\n      });\n\n      _defineProperty(this, \"signIn\", (email, password) => {// this is done at page level. wrapping '/signin' with `withAuthentication`\n        // would make it only visible to users who are signed in === Endless loop.\n      });\n\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        authUser ? this.ifAuthSaveToCache(authUser) : this.ifNotAuthRouteToSignIn();\n      }); // this.ifNotAuthRouteToSignIn();\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      const {\n        authUser\n      } = this.state;\n      return __jsx(Component, _extends({}, this.props, {\n        authUser: authUser,\n        signOut: this.signOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  const mapDispatchToProps = dispatch => ({\n    updateStateUID: uid => dispatch(saveUid(uid))\n  });\n\n  return compose(withFirebase, connect(null, mapDispatchToProps))(withAuthentication);\n};\n\nexport default withAuthentication;","map":{"version":3,"sources":["/home/adrianthompson/Documents/with-redux-app/HOCs/with-auth.js"],"names":["React","compose","connect","withFirebase","cache","Router","saveUid","withAuthentication","Component","constructor","props","setState","authUser","push","updateStateUID","uid","saveToCache","clearFromCache","email","password","state","componentDidMount","listener","firebase","auth","onAuthStateChanged","ifAuthSaveToCache","ifNotAuthRouteToSignIn","componentWillUnmount","render","signOut","mapDispatchToProps","dispatch"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,GAA7B;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,kBAAkB,GAAGC,SAAS,IAAI;AACtC,QAAMD,kBAAN,SAAiCP,KAAK,CAACQ,SAAvC,CAAiD;AAC/CC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;;AADiB,sDAgBM,MAAM;AAC7B,aAAKC,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGAP,QAAAA,MAAM,CAACQ,IAAP,CAAY,SAAZ;AACD,OArBkB;;AAAA,iDAuBCD,QAAQ,IAAI;AAC9B,aAAKD,QAAL,CAAc;AAAEC,UAAAA;AAAF,SAAd;AACA,aAAKF,KAAL,CAAWI,cAAX,CAA0BF,QAAQ,CAACG,GAAnC;AACA,eAAOX,KAAK,CAACY,WAAN,CAAkB,KAAlB,EAAyBJ,QAAQ,CAACG,GAAlC,CAAP;AACD,OA3BkB;;AAAA,uCAiCT,MAAM;AACdX,QAAAA,KAAK,CAACa,cAAN,CAAqB,KAArB,EAA4B,EAA5B;AACAZ,QAAAA,MAAM,CAACQ,IAAP,CAAY,SAAZ;AACD,OApCkB;;AAAA,sCAsCV,CAACK,KAAD,EAAQC,QAAR,KAAqB,CAC5B;AACA;AACD,OAzCkB;;AAEjB,WAAKC,KAAL,GAAa;AACXR,QAAAA,QAAQ,EAAE;AADC,OAAb;AAGD;;AAEDS,IAAAA,iBAAiB,GAAG;AAClB,WAAKC,QAAL,GAAgB,KAAKZ,KAAL,CAAWa,QAAX,CAAoBC,IAApB,CAAyBC,kBAAzB,CAA4Cb,QAAQ,IAAI;AACtEA,QAAAA,QAAQ,GACJ,KAAKc,iBAAL,CAAuBd,QAAvB,CADI,GAEJ,KAAKe,sBAAL,EAFJ;AAGD,OAJe,CAAhB,CADkB,CAMlB;AACD;;AAeDC,IAAAA,oBAAoB,GAAG;AACrB,WAAKN,QAAL;AACD;;AAYDO,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEjB,QAAAA;AAAF,UAAe,KAAKQ,KAA1B;AACA,aACE,MAAC,SAAD,eAAe,KAAKV,KAApB;AAA2B,QAAA,QAAQ,EAAEE,QAArC;AAA+C,QAAA,OAAO,EAAE,KAAKkB,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAGD;;AAjD8C;;AAoDjD,QAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACpClB,IAAAA,cAAc,EAAGC,GAAD,IAASiB,QAAQ,CAAC1B,OAAO,CAACS,GAAD,CAAR;AADG,GAAL,CAAnC;;AAIA,SAAOd,OAAO,CACVE,YADU,EAEVD,OAAO,CAAC,IAAD,EAAO6B,kBAAP,CAFG,CAAP,CAGLxB,kBAHK,CAAP;AAID,CA7DD;;AA+DA,eAAeA,kBAAf","sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withFirebase } from '.';\nimport * as cache from '../lib/cache';\nimport Router from 'next/router';\nimport { saveUid } from '../redux/actions';\n\nconst withAuthentication = Component => {\n  class withAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        authUser\n          ? this.ifAuthSaveToCache(authUser)\n          : this.ifNotAuthRouteToSignIn();\n      });\n      // this.ifNotAuthRouteToSignIn();\n    }\n\n    ifNotAuthRouteToSignIn = () => {\n      this.setState({\n        authUser: null\n      });\n      Router.push('/signin');\n    };\n\n    ifAuthSaveToCache = authUser => {\n      this.setState({ authUser });\n      this.props.updateStateUID(authUser.uid);\n      return cache.saveToCache('uid', authUser.uid);\n    };\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    signOut = () => {\n      cache.clearFromCache('uid', '');\n      Router.push('/signin');\n    };\n\n    signIn = (email, password) => {\n      // this is done at page level. wrapping '/signin' with `withAuthentication`\n      // would make it only visible to users who are signed in === Endless loop.\n    };\n\n    render() {\n      const { authUser } = this.state;\n      return (\n        <Component {...this.props} authUser={authUser} signOut={this.signOut} />\n      );\n    }\n  }\n\n  const mapDispatchToProps = dispatch => ({\n      updateStateUID: (uid) => dispatch(saveUid(uid)),\n  })\n  \n  return compose(\n      withFirebase,\n      connect(null, mapDispatchToProps),\n  )(withAuthentication)\n};\n\nexport default withAuthentication;\n"]},"metadata":{},"sourceType":"module"}