{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/adrianthompson/Documents/with-redux-app/HOCs/with-auth.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withFirebase } from '.';\nimport * as cache from '../lib/cache';\nimport Router from 'next/router';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport { saveAuthenticatedUID } from '../redux/actions';\n\nconst withAuthentication = PlatformSpecificComponent => {\n  class withAuthenticationClass extends React.Component {\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"ifNotAuthRouteToSignIn\", () => {\n        cache.clearFromCache('userProfile');\n        cache.clearFromCache('uid');\n        this.setState({\n          authUser: null\n        });\n        Router.push('/signin');\n      });\n\n      _defineProperty(this, \"ifAuthSaveToCache\", async authUser => {\n        // USER AUTH save authUser to local state, redux and cache.\n        this.setState({\n          authUser\n        });\n        this.props.updateStateWithUID(authUser.uid);\n        cache.saveToCache('uid', authUser.uid); // DATABASE / USER PROFILE\n        // get userProfile from cache (this is just a string bool)\n\n        let userProfile = await cache.getFromCache('userProfile'); // console.log('userProfileStatus string ', userProfileStatus)\n        // switch to a real bool\n\n        let userProfileStatus = userProfile === 'true' ? true : false; // console.log('userProfileStatus bool ', userProfileStatus)\n        // if its false, check the FB database, if it includes faveGig\n        // set to true.\n        // so first time it renders after signup, it will check if you\n        // entered a faveGig minimum for your profile, and if not,\n        // `userProfile` cache stays false.\n\n        if (!userProfileStatus) {\n          // console.log('user prof status is false =>' , userProfileStatus, typeof userProfileStatus)\n          this.props.firebase.user(authUser.uid).on('value', snapshot => {\n            // console.log('on value fired')\n            let fbuserProfile = snapshot.val(); // console.log('fbUserProfile snapshot val ', fbuserProfile)\n            // get FB profile, check if faveGig exists\n\n            if (fbuserProfile && fbuserProfile.faveGig === '') {\n              // if profile exists but faveGig empty, set cache to false (user hasnt completed db profile)\n              // console.log('fave gig doesnt exist, userProfile cache should be false');\n              cache.saveToCache('userProfile', 'false');\n            } // if it exists and it's not empty, set cache to true (user has completed db profile)\n\n\n            if (fbuserProfile && fbuserProfile.faveGig !== '') {\n              // console.log('fave gig DOES exist, userProfile cache should be true');\n              cache.saveToCache('userProfile', 'true');\n            }\n          });\n          return;\n        }\n\n        return Router.push('/home'); //   return cache.saveToCache('uid', authUser.uid);\n      });\n\n      _defineProperty(this, \"signOut\", () => {\n        cache.clearFromCache('uid', '');\n        cache.clearFromCache('userProfile', false);\n        this.props.firebase.doSignOut();\n        Router.push('/signin');\n      });\n\n      _defineProperty(this, \"signIn\", (email, password) => {// this is done at page level. wrapping '/signin' with `withAuthentication`\n        // would make it only visible to users who are signed in === Endless loop.\n      });\n\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      // const uid = cache.getFromCache('uid');\n      // if (!uid) {\n      //   return Router.push('/signin');\n      // }\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        authUser ? this.ifAuthSaveToCache(authUser) : this.ifNotAuthRouteToSignIn();\n      });\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      const {\n        authUser\n      } = this.state;\n      return __jsx(PlatformSpecificComponent, _extends({}, this.props, {\n        authUser: authUser,\n        signOut: this.signOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  const mapDispatchToProps = dispatch => ({\n    updateStateWithUID: id => dispatch(saveAuthenticatedUID(id))\n  });\n\n  hoistNonReactStatic(withAuthenticationClass, PlatformSpecificComponent);\n\n  if (withAuthenticationClass.getInitialProps) {\n    withAuthenticationClass.getInitialProps();\n  }\n\n  return compose(withFirebase, connect(null, mapDispatchToProps))(withAuthenticationClass);\n};\n\nexport default withAuthentication;","map":{"version":3,"sources":["/home/adrianthompson/Documents/with-redux-app/HOCs/with-auth.js"],"names":["React","compose","connect","withFirebase","cache","Router","hoistNonReactStatic","saveAuthenticatedUID","withAuthentication","PlatformSpecificComponent","withAuthenticationClass","Component","constructor","props","clearFromCache","setState","authUser","push","updateStateWithUID","uid","saveToCache","userProfile","getFromCache","userProfileStatus","firebase","user","on","snapshot","fbuserProfile","val","faveGig","doSignOut","email","password","state","componentDidMount","listener","auth","onAuthStateChanged","ifAuthSaveToCache","ifNotAuthRouteToSignIn","componentWillUnmount","render","signOut","mapDispatchToProps","dispatch","id","getInitialProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withFirebase } from '.';\nimport * as cache from '../lib/cache';\nimport Router from 'next/router';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nimport { saveAuthenticatedUID } from '../redux/actions';\n\nconst withAuthentication = PlatformSpecificComponent => {\n  class withAuthenticationClass extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      // const uid = cache.getFromCache('uid');\n      // if (!uid) {\n      //   return Router.push('/signin');\n      // }\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        authUser\n          ? this.ifAuthSaveToCache(authUser)\n          : this.ifNotAuthRouteToSignIn();\n      });\n    }\n\n    ifNotAuthRouteToSignIn = () => {\n      cache.clearFromCache('userProfile');\n      cache.clearFromCache('uid');\n      this.setState({\n        authUser: null\n      });\n      Router.push('/signin');\n    };\n\n    // if the user is authorised (signedin) then grab deets\n    // for local state, redux and cacheing.\n    ifAuthSaveToCache = async authUser => {\n      // USER AUTH save authUser to local state, redux and cache.\n      this.setState({ authUser });\n      this.props.updateStateWithUID(authUser.uid);\n      cache.saveToCache('uid', authUser.uid);\n\n      // DATABASE / USER PROFILE\n      // get userProfile from cache (this is just a string bool)\n      let userProfile = await cache.getFromCache('userProfile');\n      // console.log('userProfileStatus string ', userProfileStatus)\n      // switch to a real bool\n      let userProfileStatus = userProfile === 'true' ? true : false;\n      // console.log('userProfileStatus bool ', userProfileStatus)\n      // if its false, check the FB database, if it includes faveGig\n      // set to true.\n      // so first time it renders after signup, it will check if you\n      // entered a faveGig minimum for your profile, and if not,\n      // `userProfile` cache stays false.\n      if (!userProfileStatus) {\n        // console.log('user prof status is false =>' , userProfileStatus, typeof userProfileStatus)\n        this.props.firebase.user(authUser.uid).on('value', snapshot => {\n          // console.log('on value fired')\n          let fbuserProfile = snapshot.val();\n          // console.log('fbUserProfile snapshot val ', fbuserProfile)\n          // get FB profile, check if faveGig exists\n          if (fbuserProfile && fbuserProfile.faveGig === '') {\n            // if profile exists but faveGig empty, set cache to false (user hasnt completed db profile)\n            // console.log('fave gig doesnt exist, userProfile cache should be false');\n            cache.saveToCache('userProfile', 'false');\n          }\n          // if it exists and it's not empty, set cache to true (user has completed db profile)\n          if (fbuserProfile && fbuserProfile.faveGig !== '') {\n            // console.log('fave gig DOES exist, userProfile cache should be true');\n            cache.saveToCache('userProfile', 'true');\n          }\n        });\n        return;\n      }\n\n      return Router.push('/home');\n      //   return cache.saveToCache('uid', authUser.uid);\n    };\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    signOut = () => {\n      cache.clearFromCache('uid', '');\n      cache.clearFromCache('userProfile', false);\n      this.props.firebase.doSignOut();\n      Router.push('/signin');\n    };\n\n    signIn = (email, password) => {\n      // this is done at page level. wrapping '/signin' with `withAuthentication`\n      // would make it only visible to users who are signed in === Endless loop.\n    };\n\n    render() {\n      const { authUser } = this.state;\n      return (\n        <PlatformSpecificComponent\n          {...this.props}\n          authUser={authUser}\n          signOut={this.signOut}\n        />\n      );\n    }\n  }\n\n  const mapDispatchToProps = dispatch => ({\n    updateStateWithUID: id => dispatch(saveAuthenticatedUID(id))\n  });\n\n  \n  hoistNonReactStatic(withAuthenticationClass, PlatformSpecificComponent);\n  \n  if (withAuthenticationClass.getInitialProps) {\n    withAuthenticationClass.getInitialProps()\n  }\n\n  return compose(\n    withFirebase,\n    connect(\n      null,\n      mapDispatchToProps\n    )\n  )(withAuthenticationClass);\n};\n\nexport default withAuthentication;\n"]},"metadata":{},"sourceType":"module"}