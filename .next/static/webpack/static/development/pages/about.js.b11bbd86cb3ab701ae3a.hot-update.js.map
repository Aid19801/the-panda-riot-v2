{"version":3,"file":"static/webpack/static/development/pages/about.js.b11bbd86cb3ab701ae3a.hot-update.js","sources":["webpack:///./HOCs/with-auth.js"],"sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withFirebase } from '.';\nimport * as cache from '../lib/cache';\nimport Router from 'next/router';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nimport { saveAuthenticatedUID } from '../redux/actions';\n\nconst withAuthentication = PlatformSpecificComponent => {\n  class withAuthenticationClass extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      // const uid = cache.getFromCache('uid');\n      // if (!uid) {\n      //   return Router.push('/signin');\n      // }\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        authUser\n          ? this.ifAuthSaveToCache(authUser)\n          : this.ifNotAuthRouteToSignIn();\n      });\n    }\n\n    ifNotAuthRouteToSignIn = () => {\n      cache.clearFromCache('userProfile');\n      cache.clearFromCache('uid');\n      this.setState({\n        authUser: null\n      });\n      Router.push('/signin');\n    };\n\n    // if the user is authorised (signedin) then grab deets\n    // for local state, redux and cacheing.\n    ifAuthSaveToCache = async authUser => {\n      // USER AUTH save authUser to local state, redux and cache.\n      this.setState({ authUser });\n      this.props.updateStateWithUID(authUser.uid);\n      cache.saveToCache('uid', authUser.uid);\n\n      // DATABASE / USER PROFILE\n      // get userProfile from cache (this is just a string bool)\n      let userProfile = await cache.getFromCache('userProfile');\n      // console.log('userProfileStatus string ', userProfileStatus)\n      // switch to a real bool\n      let userProfileStatus = userProfile === 'true' ? true : false;\n      // console.log('userProfileStatus bool ', userProfileStatus)\n      // if its false, check the FB database, if it includes faveGig\n      // set to true.\n      // so first time it renders after signup, it will check if you\n      // entered a faveGig minimum for your profile, and if not,\n      // `userProfile` cache stays false.\n      if (!userProfileStatus) {\n        // console.log('user prof status is false =>' , userProfileStatus, typeof userProfileStatus)\n        this.props.firebase.user(authUser.uid).on('value', snapshot => {\n          // console.log('on value fired')\n          let fbuserProfile = snapshot.val();\n          // console.log('fbUserProfile snapshot val ', fbuserProfile)\n          // get FB profile, check if faveGig exists\n          if (fbuserProfile && fbuserProfile.faveGig === '') {\n            // if profile exists but faveGig empty, set cache to false (user hasnt completed db profile)\n            // console.log('fave gig doesnt exist, userProfile cache should be false');\n            cache.saveToCache('userProfile', 'false');\n          }\n          // if it exists and it's not empty, set cache to true (user has completed db profile)\n          if (fbuserProfile && fbuserProfile.faveGig !== '') {\n            // console.log('fave gig DOES exist, userProfile cache should be true');\n            cache.saveToCache('userProfile', 'true');\n          }\n        });\n        return;\n      }\n\n      return Router.push('/home');\n      //   return cache.saveToCache('uid', authUser.uid);\n    };\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    signOut = () => {\n      cache.clearFromCache('uid', '');\n      cache.clearFromCache('userProfile', false);\n      this.props.firebase.doSignOut();\n      Router.push('/signin');\n    };\n\n    signIn = (email, password) => {\n      // this is done at page level. wrapping '/signin' with `withAuthentication`\n      // would make it only visible to users who are signed in === Endless loop.\n    };\n\n    render() {\n      const { authUser } = this.state;\n      return (\n        <PlatformSpecificComponent\n          {...this.props}\n          authUser={authUser}\n          signOut={this.signOut}\n        />\n      );\n    }\n  }\n\n  const mapDispatchToProps = dispatch => ({\n    updateStateWithUID: id => dispatch(saveAuthenticatedUID(id))\n  });\n\n  \n  hoistNonReactStatic(withAuthenticationClass, PlatformSpecificComponent);\n  \n  if (withAuthenticationClass.getInitialProps) {\n    withAuthenticationClass.getInitialProps()\n  }\n\n  return compose(\n    withFirebase,\n    connect(\n      null,\n      mapDispatchToProps\n    )\n  )(withAuthenticationClass);\n};\n\nexport default withAuthentication;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoBA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AARA;AAAA;AACA;AADA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AApCA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AAAA;AACA;AADA;AA8EA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAnFA;AAsFA;AACA;AACA;AAtFA;AACA;AADA;AAFA;AAKA;AACA;AARA;AAAA;AAAA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAnBA;AAAA;AAAA;AA4EA;AACA;AA7EA;AAAA;AAAA;AA2FA;AAEA;AAGA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AApGA;AACA;AADA;AAAA;AACA;AAsGA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;;;;A","sourceRoot":""}